/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mio.GUI.form;

import com.mio.BLL.ClassBLL;
import com.mio.BLL.EduProgramBLL;
import com.mio.BLL.RoomBLL;
import com.mio.BLL.SectionBLL;
import com.mio.BLL.StudentGroupBLL;
import com.mio.BLL.SubjectBLL;
import com.mio.BLL.TeacherBLL;
import com.mio.DTO.CourseClass;
import com.mio.DTO.EduProgram;
import com.mio.DTO.EduProgramDetail;
import com.mio.DTO.Room;
import com.mio.DTO.SO;
import com.mio.DTO.Section;
import static com.mio.DTO.Section.SectionStatus.NEW_SECTION;
import static com.mio.DTO.Section.SectionStatus.NORMAL;
import static com.mio.DTO.Section.SectionStatus.SCHEDULING;
import com.mio.DTO.StudentGroup;
import com.mio.DTO.Subject;
import com.mio.GUI.dialog.BusyDialog;
import com.mio.GUI.dialog.CourseClassDialog;
import com.mio.GUI.dialog.FillClassDialog;
import com.mio.GUI.dialog.FirstFillDirectionDialog;
import com.mio.GUI.dialog.MakeScheduleDialog;
import com.mio.GUI.dialog.MessageDialog;
import com.mio.GUI.dialog.PreCourseClassDialog;
import com.mio.GUI.dialog.PrepareAlgorithmDialog;
import com.mio.GUI.dialog.SectionDialog;
import com.mio.GUI.dialog.ShowScheduleDialog;
import com.mio.GUI.main.Main;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Mio
 */
public class AdminFormMakeSchedule extends javax.swing.JPanel {

    /**
     * Creates new form AdminFormMakeSchedule
     */
    
    private Section.SectionStatus curStatus;
    private FillStatus fillStatus;
    private Section curSection;
    
    public AdminFormMakeSchedule() {
        initComponents();
        
        menuSplit1.setText("Xếp lịch");
        
        cbxSection.setModel(new DefaultComboBoxModel(SectionBLL.getInstance().getSectionList().toArray()));
        cbxSection.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if(e.getStateChange() == ItemEvent.SELECTED) {
                    init((Section)e.getItem());
                    initStatus(curSection.equals(e.getItem()));
                }
            }
        });
        
        this.fillStatus = FillStatus.BEFORE;

        teachers = new HashMap<>();
        for(SO sim: TeacherBLL.getInstance().getSTeacherALL()) {
            teachers.put(sim.getId(), sim);
        }

        groups = new HashMap<>();
        for(SO sim: StudentGroupBLL.getInstance().getSStudentGroupList()) {
            groups.put(sim.getId(), sim);
        }

        subjects = new HashMap<>();
        for(SO sim: SubjectBLL.getInstance().getSSubjectList()) {
            subjects.put(sim.getId(), sim);
        }
        
        rooms = new HashMap<>();
        for(SO sim: RoomBLL.getInstance().getSRoomList()) {
            rooms.put(sim.getId(), sim);
        }
        
        curSection = SectionBLL.getInstance().getCurSection();
        curStatus = SectionBLL.getInstance().getCurSectionStatus();
        
        table.fixTable(scroll);
        courseClasses = null;
        table.setModel(new MyModel());
        cbxSection.setSelectedIndex(-1);
        cbxSection.setSelectedItem(curSection);
    }
    
    
    private void init(Section s) {
        courseClasses = ClassBLL.getInstance().getClassBySection(s.getId());
        ((MyModel)table.getModel()).fireTableDataChanged();
    }

    private static enum FillStatus {
        BEFORE, AFTER
    }
    
    private List<CourseClass> courseClasses;
    private List<Integer> selectedEduId;
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuSplit1 = new com.mio.GUI.swing.MenuSplit();
        label1 = new com.mio.GUI.swing.Label();
        cbxSection = new com.mio.GUI.swing.ComboBox();
        btnEditSection = new com.mio.GUI.swing.Button();
        jPanel1 = new javax.swing.JPanel();
        btnNewSection = new com.mio.GUI.swing.Button();
        btnFillClass = new com.mio.GUI.swing.Button();
        btnGASchedule = new com.mio.GUI.swing.Button();
        btnCheck = new com.mio.GUI.swing.Button();
        btnApply = new com.mio.GUI.swing.Button();
        jPanel2 = new javax.swing.JPanel();
        scroll = new javax.swing.JScrollPane();
        table = new com.mio.GUI.swing.MyTable();
        btnEdit = new com.mio.GUI.swing.Button();
        btnAdd = new com.mio.GUI.swing.Button();
        btnDel = new com.mio.GUI.swing.Button();
        btnBusy = new com.mio.GUI.swing.Button();

        setOpaque(false);

        label1.setText("Học kỳ:");

        btnEditSection.setText("Sửa thông tin");
        btnEditSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditSectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        btnNewSection.setText("Học kỳ mới");
        btnNewSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewSectionActionPerformed(evt);
            }
        });

        btnFillClass.setText("Đổ học phần");
        btnFillClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFillClassActionPerformed(evt);
            }
        });

        btnGASchedule.setText("Lập lịch(Auto)");
        btnGASchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGAScheduleActionPerformed(evt);
            }
        });

        btnCheck.setText("Kiểm tra");
        btnCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckActionPerformed(evt);
            }
        });

        btnApply.setText("Áp dụng");
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scroll.setViewportView(table);

        btnEdit.setText("Sửa");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnAdd.setText("Thêm");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDel.setText("Xóa");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnBusy.setText("Lịch bận");
        btnBusy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBusyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menuSplit1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxSection, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEditSection, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnNewSection, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnFillClass, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnGASchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnApply, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnDel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnBusy, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(menuSplit1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNewSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFillClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGASchedule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnApply, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBusy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnFillClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFillClassActionPerformed
        switch (fillStatus) {
            case BEFORE -> {

                List<EduProgram> eduProgs = EduProgramBLL.getInstance().getEduProgramActive();
                List<List<CourseClass>> coursesByGroups = new ArrayList<>();
                HashMap<Integer, Integer> group_edu = new HashMap<>();

                for(EduProgram e: eduProgs) {
                    List<EduProgramDetail> eduProgDetails = EduProgramBLL.getInstance().getEduProgDetailBySemester(e.getId(), e.getSemesterCurrent() + 1);
                    List<StudentGroup> studentGroups = StudentGroupBLL.getInstance().getStudentGroupListByEdu(e.getId());
                    for(StudentGroup sg: studentGroups) {
                        group_edu.put(sg.getId(), e.getId());
                        List<CourseClass> courses = new ArrayList<>();
                        for(EduProgramDetail ed: eduProgDetails) {
                            CourseClass cc = new CourseClass(-1, ed.getSubjectId(), -1, curSection.getId(), -1, sg.getSize(), false, -1, -1, -1, -1);
                            cc.addStudentGroupId(sg.getId());
                            courses.add(cc);
                        }
                        if(!courses.isEmpty()) {
                            coursesByGroups.add(courses);
                        }
                    }
                }


                List<List<CourseClass>> selectedGroups = new FillClassDialog(Main.getInstance(), coursesByGroups).showDialog();

                if(selectedGroups != null) {
                    selectedEduId = new ArrayList<>();
                    HashSet<Integer> checkAdded = new HashSet<>();
                    HashMap<Integer, Subject> subjects = new HashMap<>();
                    this.courseClasses = new ArrayList<>();
                    for(List<CourseClass> ccs: selectedGroups) {
                        int eduId = group_edu.get(ccs.get(0).getStudentGroupId().get(0));
                        if(!checkAdded.contains(eduId)) {
                            checkAdded.add(eduId);
                            selectedEduId.add(eduId);
                        }
                        for(CourseClass cc: ccs) {
                            courseClasses.add(cc);
                            if(subjects.get(cc.getSubjectId()) == null) {
                                Subject s = SubjectBLL.getInstance().getSubject(cc.getSubjectId());
                                subjects.put(s.getId(), s);
                            }
                            cc.setDuration(subjects.get(cc.getSubjectId()).getCredit());
                            cc.setRequireLab(subjects.get(cc.getSubjectId()).isRequireLab());
                        }
                    }
                    fillStatus = FillStatus.AFTER;
                    initStatus(true);
                    ((MyModel)table.getModel()).fireTableDataChanged();
                }
            }
            case AFTER -> {
                //going to check
                int clickedBtn = new FirstFillDirectionDialog(Main.getInstance(), checkTeacherAsign()).showDialog();
                //after checked
                switch (clickedBtn) {
                    case 0 -> {
                        curStatus = Section.SectionStatus.SCHEDULING;
                        initStatus(true);
                        SectionBLL.getInstance().setCurSectionStatus(curStatus);
                        for(Integer id: selectedEduId) {
                            EduProgramBLL.getInstance().nextSemester(id);
                        }
                        for(CourseClass cc: courseClasses) {
                            ClassBLL.getInstance().addClassWithoutSchedule(cc);
                        }
                        initStatus(true);
                    }
                    case 1 -> {
                        courseClasses = null;
                        selectedEduId = null;
                        ((MyModel)table.getModel()).fireTableDataChanged();
                        fillStatus = FillStatus.BEFORE;
                        initStatus(true);
                    }
                    case 2 -> {
                        // do nothing
                    }
                }

            }
        }
    }//GEN-LAST:event_btnFillClassActionPerformed

    private void btnNewSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewSectionActionPerformed
        Section s = new SectionDialog(Main.getInstance(), null).showDialog();
        if(s != null) {
            SectionBLL.getInstance().addSection(s);
            if(s.getId() != -1) {
                curSection = s;
                curStatus = Section.SectionStatus.NEW_SECTION;
                initStatus(true);
                SectionBLL.getInstance().setCurSection(s.getId());
                SectionBLL.getInstance().setCurSectionStatus(curStatus);
                courseClasses = null;
                ((MyModel)table.getModel()).fireTableDataChanged();
                cbxSection.addItem(curSection);
                cbxSection.setSelectedItem(curSection);
            } else {
                Main.getInstance().showNotification(Main.NotificationType.ADD_FAILED);
            }
        }
    }//GEN-LAST:event_btnNewSectionActionPerformed

    private void btnEditSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditSectionActionPerformed
        Section selected = (Section)cbxSection.getSelectedItem();
        if(selected != null) {
            Section s = new SectionDialog(Main.getInstance(), selected).showDialog();
            if(s != null) {
                s.setId(selected.getId());
                if(SectionBLL.getInstance().updateSection(s)) {
                    selected.copy(s);
                } else {
                    Main.getInstance().showNotification(Main.NotificationType.UPDATE_FAILED);
                }
            }
        }
    }//GEN-LAST:event_btnEditSectionActionPerformed

    private void btnGAScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGAScheduleActionPerformed
        if(courseClasses.isEmpty()) {
            new MessageDialog(Main.getInstance(), "Không có lớp học phần nào để xếp thời khóa biểu!", false).showDialog();
            return;
        }
        List<Room> rooms = new PrepareAlgorithmDialog(Main.getInstance()).showDialog();
        if(rooms != null && !rooms.isEmpty()) {
            HashMap<Integer, ArrayList<Integer>> unNamed = new MakeScheduleDialog(Main.getInstance(), courseClasses, rooms).showDialog();
            if(unNamed != null) {
                for(CourseClass cc: courseClasses) {
                    cc.setRoomId(unNamed.get(cc.getId()).get(0));
                    cc.setTimeSlot(unNamed.get(cc.getId()).get(1));
                }
                ((MyModel)table.getModel()).fireTableDataChanged();
            }
        }
    }//GEN-LAST:event_btnGAScheduleActionPerformed

    private void btnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckActionPerformed
        boolean isScheduled = true;
        for(CourseClass cc: courseClasses) {
            if(cc.getRoomId() == -1) {
                isScheduled = false;
                break;
            }
        }
        if(isScheduled) {
            new ShowScheduleDialog(Main.getInstance(), courseClasses).setVisible(true);
        } else {
            new MessageDialog(Main.getInstance(), "Chưa xếp lịch cho tất cả môn", false).showDialog();
        }
    }//GEN-LAST:event_btnCheckActionPerformed

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        
        boolean isScheduled = true;
        for(CourseClass cc: courseClasses) {
            if(cc.getRoomId() == -1) {
                isScheduled = false;
                break;
            }
        }
        if(isScheduled) {
            if(new MessageDialog(Main.getInstance(), "Lưu ý: nhấn vào Kiểm tra trước khi Áp dụng để kiểm tra tính phù hợp của lịch học\nBạn có muốn tiếp tục", true).showDialog()) {
                for(CourseClass cc: courseClasses) {
                    ClassBLL.getInstance().updateClass(cc);
                }
                curStatus = NORMAL;
                SectionBLL.getInstance().setCurSectionStatus(curStatus);
                initStatus(true);
            }
        } else {
            new MessageDialog(Main.getInstance(), "Chưa xếp lịch cho tất cả môn", false).showDialog();
        }
    }//GEN-LAST:event_btnApplyActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        int r = table.getSelectedRow();
        if(r != -1 && null != curStatus) switch (curStatus) {
            case NEW_SECTION -> {
                if(new PreCourseClassDialog(Main.getInstance(), courseClasses.get(r)).showDialog() != null) {
                    ((MyModel)table.getModel()).fireTableRowsUpdated(r, r);
                }
            }
            case SCHEDULING -> {
                CourseClass cc = new CourseClassDialog(Main.getInstance(), courseClasses.get(r), false).showDialog();
                if(cc != null) {
                    cc.setId(courseClasses.get(r).getId());
                    cc.setSectionId(courseClasses.get(r).getSectionId());
                    ClassBLL.getInstance().updateClassWithoutSchedule(cc);
                    courseClasses.get(r).copy(cc); 
                    ((MyModel)table.getModel()).fireTableRowsUpdated(r, r);
                }
            }
            case NORMAL -> {
                CourseClass cc = new CourseClassDialog(Main.getInstance(), courseClasses.get(r), true).showDialog();
                if(cc != null) {
                    cc.setId(courseClasses.get(r).getId());
                    cc.setSectionId(courseClasses.get(r).getSectionId());
                    ClassBLL.getInstance().updateClassWithoutSchedule(cc);
                    courseClasses.get(r).copy(cc); 
                    ((MyModel)table.getModel()).fireTableRowsUpdated(r, r);
                }
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if(null != curStatus) switch (curStatus) {
            case SCHEDULING -> {
                CourseClass cc = new CourseClassDialog(Main.getInstance(), null, false).showDialog();
                if(cc != null) {
                    cc.setSectionId(curSection.getId());
                    ClassBLL.getInstance().addClassWithoutSchedule(cc);
                    if(cc.getId() != -1) {
                        courseClasses.add(cc);
                        ((MyModel)table.getModel()).fireTableRowsInserted(courseClasses.size() - 1, courseClasses.size() - 1);
                    }
                }
            }
            case NORMAL -> {
                CourseClass cc = new CourseClassDialog(Main.getInstance(), null, true).showDialog();
                if(cc != null) {
                    cc.setSectionId(curSection.getId());
                    ClassBLL.getInstance().addClassWithoutSchedule(cc);
                    if(cc.getId() != -1) {
                        courseClasses.add(cc);
                        ((MyModel)table.getModel()).fireTableRowsInserted(courseClasses.size() - 1, courseClasses.size() - 1);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        int r = table.getSelectedRow();
        if(r != -1) {
            if(new MessageDialog(Main.getInstance(), "Bạn có chắc chắn muốn xóa học phần này?", true).showDialog()) {
                if(ClassBLL.getInstance().delClass(courseClasses.get(r).getId())) {
                    courseClasses.remove(r);
                    ((MyModel)table.getModel()).fireTableRowsDeleted(r, r);
                } else {
                    Main.getInstance().showNotification(Main.NotificationType.DELETE_FAILED);
                }
            }
        }
    }//GEN-LAST:event_btnDelActionPerformed

    private void btnBusyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBusyActionPerformed
        int r = table.getSelectedRow();
        if(r != -1) {
            CourseClass cc = courseClasses.get(r);
            String n = new BusyDialog(Main.getInstance(), ClassBLL.getInstance().getBusy(cc.getId())).showDialog();
            if (n != null) {
                ClassBLL.getInstance().updateBusy(cc.getId(), n);
            }
        }
    }//GEN-LAST:event_btnBusyActionPerformed

    private boolean checkTeacherAsign() {
        for(CourseClass cc: courseClasses) {
            if(cc.getTeacherId() == -1)
                return false;
        }
        return true;
    }
    
    private void initStatus(boolean isCurSection) {
        if(!isCurSection) {
                btnNewSection.setEnabled(false);
                btnFillClass.setEnabled(false);
                btnGASchedule.setEnabled(false);
                btnCheck.setEnabled(true);
                btnApply.setEnabled(false);
                btnEdit.setEnabled(false);
                btnAdd.setEnabled(false);
                btnDel.setEnabled(false);
                btnBusy.setEnabled(false);
            return;
        }
        btnEdit.setEnabled(true);
        btnAdd.setEnabled(true);
        btnDel.setEnabled(true);
        switch (curStatus) {
            case NORMAL -> {
                btnNewSection.setEnabled(true);
                btnFillClass.setEnabled(false);
                btnGASchedule.setEnabled(false);
                btnCheck.setEnabled(true);
                btnApply.setEnabled(false);
                btnBusy.setEnabled(false);
            }
            case NEW_SECTION -> {
                btnNewSection.setEnabled(false);
                btnFillClass.setEnabled(true);
                btnGASchedule.setEnabled(false);
                btnCheck.setEnabled(false);
                btnApply.setEnabled(false);
                btnBusy.setEnabled(false);
                switch(fillStatus) {
                    case BEFORE -> {
                        btnDel.setEnabled(true);
                        btnAdd.setEnabled(true);
                        btnEdit.setText("Sửa");
                        btnFillClass.setText("Đổ học phần");
                        cbxSection.setEnabled(true);
                    }
                    case AFTER -> {
                        btnDel.setEnabled(false);
                        btnAdd.setEnabled(false);
                        btnEdit.setText("Phân công");
                        btnFillClass.setText("Đồng ý");
                        cbxSection.setEnabled(false);
                    }
                }
            }
            case SCHEDULING -> {
                btnNewSection.setEnabled(false);
                btnFillClass.setEnabled(false);
                btnGASchedule.setEnabled(true);
                btnCheck.setEnabled(true);
                btnApply.setEnabled(true);
                btnEdit.setText("Sửa");
                cbxSection.setEnabled(false);
                cbxSection.setEnabled(true);
                btnBusy.setEnabled(true);
            }
        }
    }
    
    private HashMap<Integer, SO> teachers;
    private HashMap<Integer, SO> groups;
    private HashMap<Integer, SO> subjects;
    private HashMap<Integer, SO> rooms;
    
    private final class MyModel extends AbstractTableModel {
        MyModel() {
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0 -> {
                    return "Mã học phần";
                }
                case 1 -> {
                    return "Tên môn";
                }
                case 2 -> {
                    return "Loại phòng";
                }
                case 3 -> {
                    return "Tên nhóm";
                }
                case 4 -> {
                    return "Số lượng";
                }
                case 5 -> {
                    return "Tên giáo viên";
                }
                default -> {
                    return "Lịch";
                }
            }
        }
        
        
        @Override
        public int getColumnCount() {
            return 7;
        }

        @Override
        public int getRowCount() {
            if(courseClasses == null) return 0;
            return courseClasses.size();
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            CourseClass row = courseClasses.get(rowIndex);
            switch (columnIndex) {
                case 0 -> {
                    return row.getId();
                }
                case 1 -> {
                    return subjects.get(row.getSubjectId()).getName();
                }
                case 2 -> {
                    return row.isRequireLab() ? "Thực hành" : "Lý thuyết";
                }
                case 3 -> {
                    return groups.get(row.getStudentGroupId().get(0)).getName();
                }
                case 4 -> {
                    return row.getSize();
                }
                case 5 -> {
                    return row.getTeacherId() == -1 ? "Chưa phân công" : teachers.get(row.getTeacherId()).getName();
                }
                default -> {
                    if(row.getRoomId() == -1)
                        return "";
                    int day = row.getTimeSlot() % 6;
                    int time = row.getTimeSlot() / 6;
                    int dur = row.getDuration();
                    return "" + rooms.get(row.getRoomId()).getName() + " Thứ " + (day + 2) + " " + (time + 1) + "-" + (time + dur);
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.mio.GUI.swing.Button btnAdd;
    private com.mio.GUI.swing.Button btnApply;
    private com.mio.GUI.swing.Button btnBusy;
    private com.mio.GUI.swing.Button btnCheck;
    private com.mio.GUI.swing.Button btnDel;
    private com.mio.GUI.swing.Button btnEdit;
    private com.mio.GUI.swing.Button btnEditSection;
    private com.mio.GUI.swing.Button btnFillClass;
    private com.mio.GUI.swing.Button btnGASchedule;
    private com.mio.GUI.swing.Button btnNewSection;
    private com.mio.GUI.swing.ComboBox cbxSection;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private com.mio.GUI.swing.Label label1;
    private com.mio.GUI.swing.MenuSplit menuSplit1;
    private javax.swing.JScrollPane scroll;
    private com.mio.GUI.swing.MyTable table;
    // End of variables declaration//GEN-END:variables
}
