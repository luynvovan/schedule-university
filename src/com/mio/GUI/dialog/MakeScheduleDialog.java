
package com.mio.GUI.dialog;

import com.mio.BLL.algorithm.Algorithm;
import com.mio.BLL.algorithm.Configuration;
import com.mio.BLL.algorithm.GACourseClass;
import com.mio.BLL.algorithm.GARoom;
import com.mio.BLL.algorithm.GASchedule;
import com.mio.DTO.CourseClass;
import com.mio.DTO.Room;
import com.mio.GUI.swing.scroll.ScrollBarCustom;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JDialog;

public final class MakeScheduleDialog extends JDialog {
    private int x, y;
    public MakeScheduleDialog(java.awt.Frame parent, List<CourseClass> courseClasses, List<Room> rooms) {
        super(parent, true);
        initComponents();
        setBackground(new Color(0, 0, 0, 0));
        addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                x = e.getX();
                y = e.getY();
            }
            
        });
        MakeScheduleDialog me = this;
        addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                me.setLocation(e.getXOnScreen() - x, e.getYOnScreen() - y);
            }
        });
        
        scroll.setViewportBorder(null);
        scroll.getViewport().setOpaque(false);
        scroll.setBorder(null);
        scroll.setVerticalScrollBar(new ScrollBarCustom());
        scroll.setHorizontalScrollBar(new ScrollBarCustom());
        
        Configuration.getInstance().init(courseClasses, rooms);
        runGas = new RunGAs(this);
        showSchedule(Algorithm.getInstance().getFittest());
        setStatus(false);
    }

    public void showSchedule(GASchedule schedule) {
        int[] constrains = new int[8];
        boolean[] criterias = schedule.getCriteria();
        for(int i = 0; i < 8; ++i) {
            constrains[i] = 0;
            for(int j = i; j < criterias.length; j += 8) {
                if(!criterias[j])
                    ++constrains[i];
            }
        }
        inforPanel.setInfor(!runGas.isStop(), schedule.getFitness(), Algorithm.getInstance().getAverageFitness(),Algorithm.getInstance().getGenerationCount(), constrains, Algorithm.getInstance().getIsekaiCount());
        inforPanel.setConfig(Algorithm.getInstance().getCrossoverProb(), Algorithm.getInstance().getMutationProb(), Algorithm.getInstance().isIsekai(), Algorithm.getInstance().getIsekaiFitness());
        schedulePanel.setSchedule(schedule);
    }
    
    public HashMap<Integer, ArrayList<Integer>> showDialog() {
        setVisible(true);
        Algorithm.clear();
        Configuration.clear();
        return rtn;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBorder1 = new com.mio.GUI.swing.PanelBorder();
        panelBorder2 = new com.mio.GUI.swing.PanelBorder();
        scroll = new javax.swing.JScrollPane();
        schedulePanel = new com.mio.GUI.dialog.SchedulePanel();
        inforPanel = new com.mio.GUI.swing.GAInforPanel();
        btnStart = new com.mio.GUI.swing.Button();
        btnApply = new com.mio.GUI.swing.Button();
        btnCancel = new com.mio.GUI.swing.Button();
        btnConfig = new com.mio.GUI.swing.Button();
        btnConstaint = new com.mio.GUI.swing.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        panelBorder2.setBackground(new java.awt.Color(44, 116, 179));

        javax.swing.GroupLayout schedulePanelLayout = new javax.swing.GroupLayout(schedulePanel);
        schedulePanel.setLayout(schedulePanelLayout);
        schedulePanelLayout.setHorizontalGroup(
            schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 650, Short.MAX_VALUE)
        );
        schedulePanelLayout.setVerticalGroup(
            schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 590, Short.MAX_VALUE)
        );

        scroll.setViewportView(schedulePanel);

        javax.swing.GroupLayout inforPanelLayout = new javax.swing.GroupLayout(inforPanel);
        inforPanel.setLayout(inforPanelLayout);
        inforPanelLayout.setHorizontalGroup(
            inforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        inforPanelLayout.setVerticalGroup(
            inforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 502, Short.MAX_VALUE)
        );

        btnStart.setText("Chạy/Dừng");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnApply.setText("Áp dụng");
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        btnCancel.setText("Hủy");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnConfig.setText("Thông số");
        btnConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfigActionPerformed(evt);
            }
        });

        btnConstaint.setText("Ràng buộc");
        btnConstaint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConstaintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBorder2Layout = new javax.swing.GroupLayout(panelBorder2);
        panelBorder2.setLayout(panelBorder2Layout);
        panelBorder2Layout.setHorizontalGroup(
            panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inforPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelBorder2Layout.createSequentialGroup()
                        .addGroup(panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnConfig, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnApply, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addComponent(btnConstaint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        panelBorder2Layout.setVerticalGroup(
            panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scroll)
                    .addGroup(panelBorder2Layout.createSequentialGroup()
                        .addComponent(inforPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnConfig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnConstaint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnApply, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelBorder1Layout = new javax.swing.GroupLayout(panelBorder1);
        panelBorder1.setLayout(panelBorder1Layout);
        panelBorder1Layout.setHorizontalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelBorder2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelBorder1Layout.setVerticalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelBorder2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelBorder1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBorder1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private RunGAs runGas;
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        if(runGas.isStop()) {
            runGas.start();
        } else {
            runGas.pause();
        }

    }//GEN-LAST:event_btnStartActionPerformed

    private HashMap<Integer, ArrayList<Integer>> rtn;
    
    public void setStatus(boolean running) {
        if(running) {
            btnConfig.setEnabled(false);
            btnApply.setEnabled(false);
            btnCancel.setEnabled(false);
            btnStart.setText("Dừng");
        } else {
            btnConfig.setEnabled(true);
            btnApply.setEnabled(true);
            btnCancel.setEnabled(true);
            btnStart.setText("Chạy");
        }
    }
    
    private void btnConstaintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConstaintActionPerformed
        new ConstraintDialog(this).setVisible(true);
    }//GEN-LAST:event_btnConstaintActionPerformed

    private void btnConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfigActionPerformed
        new ConfigDialog(this).setVisible(true);
        inforPanel.setConfig(Algorithm.getInstance().getCrossoverProb(), Algorithm.getInstance().getMutationProb(), Algorithm.getInstance().isIsekai(), Algorithm.getInstance().getIsekaiFitness());
    }//GEN-LAST:event_btnConfigActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        rtn = null;
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        rtn = null;
        if(Algorithm.getInstance().getFittest().getFitness() <= 1) {
            if(new MessageDialog(this, "Vẫn còn một số học phần không đạt yêu cầu về các ràng buộc. Bạn có muốn tiếp tục?", true).showDialog()) {
                rtn = new HashMap<>();
                HashMap<Integer, GARoom> rooms = Configuration.getInstance().getRooms();
                int daySize = 10 * rooms.size();
                for(Map.Entry<GACourseClass, Integer> entry: Algorithm.getInstance().getFittest().getClasses().entrySet()) {
                    int p = entry.getValue();
                    int day = p / daySize;
                    int time = p % daySize;
                    int room = time / 10;
                    time = time % 10;
                    rtn.put(entry.getKey().getId(), new ArrayList<>(Arrays.asList(rooms.get(room).getId(), time * 6 + day)));
                }
                dispose();
            }
        } else {
            rtn = new HashMap<>();
            HashMap<Integer, GARoom> rooms = Configuration.getInstance().getRooms();
            int daySize = 10 * rooms.size();
            for(Map.Entry<GACourseClass, Integer> entry: Algorithm.getInstance().getFittest().getClasses().entrySet()) {
                int p = entry.getValue();
                int day = p / daySize;
                int time = p % daySize;
                int room = time / 10;
                time = time % 10;
                rtn.put(entry.getKey().getId(), new ArrayList<>(Arrays.asList(rooms.get(room).getId(), time * 6 + day)));
            }
            dispose();
        }
    }//GEN-LAST:event_btnApplyActionPerformed

    private class RunGAs implements Runnable {

        private Thread t;
        
        private Algorithm alg;

        private volatile boolean stop;
        
        public RunGAs(MakeScheduleDialog msd) {
            alg = Algorithm.getInstance();
            stop = true;
            t = null;
            this.msd = msd;
        }
        
        private MakeScheduleDialog msd;
        
        @Override
        public void run() {
            while(true) {
                if(stop) {
                    msd.showSchedule(alg.getFittest());
                    return;
                }
                synchronized (Algorithm.getInstance()) {
                    alg.nextGeneration();
                    if(alg.isIsekai() && alg.isConverge()) {
                        alg.eliteIsekai();
                    }
                    if(alg.isNoViolate()) {
                        new Thread() {
                            @Override
                            public void run() {
                                pause();
                            }
                            
                        }.start();
                    }
                    msd.showSchedule(alg.getFittest());
                }
            }
        }
        
        public void start() {
            msd.setEnabled(false);
            if(t == null) {
                msd.setStatus(true);
                stop = false;
                t = new Thread(this, "hello");
                t.start();
            }
            msd.setEnabled(true);
        }
        public synchronized void pause() {
            msd.setEnabled(false);
            if(t != null) {
                msd.setStatus(false);
                stop = true;
                t.interrupt();
                try {
                    t.join();
                } catch(InterruptedException e) {
                    e.printStackTrace();
                }
                t = null;
            }
            msd.setEnabled(true);
        }
        public boolean isStop() {
            return stop;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.mio.GUI.swing.Button btnApply;
    private com.mio.GUI.swing.Button btnCancel;
    private com.mio.GUI.swing.Button btnConfig;
    private com.mio.GUI.swing.Button btnConstaint;
    private com.mio.GUI.swing.Button btnStart;
    private com.mio.GUI.swing.GAInforPanel inforPanel;
    private com.mio.GUI.swing.PanelBorder panelBorder1;
    private com.mio.GUI.swing.PanelBorder panelBorder2;
    private com.mio.GUI.dialog.SchedulePanel schedulePanel;
    private javax.swing.JScrollPane scroll;
    // End of variables declaration//GEN-END:variables
}
